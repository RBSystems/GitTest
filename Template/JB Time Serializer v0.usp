/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "32" // Miscellaneous                    
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_INHERIT_FROM_PARENT
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   This module is going to handle the indirect text for adjusting the alarm time and the snooze time.  It adjusts the alarm time locally 
 	and sends the new alarm time out to the main Alarm Clock module.

	Global integers Editting_Alarm is a flag used to determine which field we are currently editting.
	Global integer Num_Presses keeps a count of the number times the current field is selected. 

    
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT OSC_CHANGE;
DIGITAL_INPUT TIME_FORMAT_12_HOUR;
DIGITAL_INPUT TIME_FORMAT_24_HOUR; 

STRING_OUTPUT CUR_TIME_OUT;
DIGITAL_OUTPUT TIME_FORMAT_12_HOUR_FB;
DIGITAL_OUTPUT TIME_FORMAT_24_HOUR_FB;
       

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
//STRING_PARAMETER sFile[50];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

//Use settings stucture for parameters that will be the same regardless of the current alarm clock
//Use alarm structure for parameters that are change depending on which alarm clock is active    
integer SETTINGS_12_HOUR_MODE,CUR_TIME_HOUR,CUR_TIME_MIN,CUR_TIME_DATE;
 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
 

function updateTime(){  
	//update the time variable(s)
	STRING temp_HOUR[2], temp_MIN[2], temp_AMPM[2];
    
	CUR_TIME_HOUR = GetHourNum();
	CUR_TIME_MIN = GetMinutesNum();
	CUR_TIME_DATE = GetDateNum();

	//add leading zeros if necessary
	temp_HOUR = itoa(CUR_TIME_HOUR);	//if (len(temp_HOUR) = 1) temp_HOUR = "0" + temp_HOUR;   
	temp_MIN = itoa(CUR_TIME_MIN); 	if (len(temp_MIN) = 1) temp_MIN = "0" + temp_MIN;      
	
	//Check if we are in 12 or 24 hour mode. 0 is 12 hour mode, 1 is 24 hour mode
	if(SETTINGS_12_HOUR_MODE=1){ 
		//am or pm?
		if (CUR_TIME_HOUR > 12){
			temp_AMPM = "PM";
			temp_HOUR = itoa(CUR_TIME_HOUR - 12);	//if (len(temp_HOUR) = 1) temp_HOUR = "0" + temp_HOUR;
		}else if (CUR_TIME_HOUR = 12){	
			temp_AMPM = "PM";  
		}else if (CUR_TIME_HOUR = 0){	
			temp_HOUR = "12";
			temp_AMPM = "AM"; //maybe PM? 
		}else{
			temp_AMPM = "AM";  
		}      
	
		//output to the program  
		CUR_TIME_OUT = temp_HOUR + ":" + temp_MIN + " " + temp_AMPM;
    }
	else{ //we are in 24 hour mode
		if (len(temp_HOUR) = 1) 
			temp_HOUR = "0" + temp_HOUR;

		CUR_TIME_OUT = temp_HOUR + ":" + temp_MIN;  
	}              
	
}
  
                    

                
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
//CHANGE CUR_DATE_IN{ //when the date changes, update
//	CUR_DATE_OUT = CUR_DATE_IN;	
//}        
           
CHANGE OSC_CHANGE{ //when the oscillator changes, update necessary info (currently set to once a second)
	
	INTEGER CHECK_ALARM_FLAG;

    //check if the minute has changed, if so then we need to update the time and check the alarm
	if(CUR_TIME_MIN!=GetMinutesNum())
	{ 
		updateTime();
	} 
}                   
    

PUSH TIME_FORMAT_12_HOUR{
  	
	SETTINGS_12_HOUR_MODE=1; //toggle the hour format mode;
		
	TIME_FORMAT_12_HOUR_FB=1;
    TIME_FORMAT_24_HOUR_FB=0;
	 	
		updateTime ();
}

PUSH TIME_FORMAT_24_HOUR{

	SETTINGS_12_HOUR_MODE=0; 
			
	TIME_FORMAT_12_HOUR_FB=0;
	TIME_FORMAT_24_HOUR_FB=1;	 
	 	
		updateTime ();
}

Function Main(){
    
	 
	WaitForInitializationComplete();
    SETTINGS_12_HOUR_MODE=1;
	TIME_FORMAT_12_HOUR_FB=1;	
	updateTime();
	
	}

